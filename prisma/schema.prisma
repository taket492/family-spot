// Datasource: default to env or sqlite for local dev
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Spot {
  id           String              @id @default(cuid())
  type         String
  name         String
  city         String
  address      String?
  lat          Float
  lng          Float
  phone        String?
  tags         String              // JSON string of string[]
  openHours    String?
  priceBand    String?
  images       String              // JSON string of string[]
  rating       Float               @default(0)
  reviews      Review[]
  userVisits   UserSpotVisit[]
  searchVector Unsupported("tsvector")?
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt

  @@index([name])
  @@index([city])
  @@index([city, type])
  @@index([lat, lng])
}

model Review {
  id        String   @id @default(cuid())
  spotId    String
  spot      Spot     @relation(fields: [spotId], references: [id])
  stars     Int
  childAge  String
  text      String
  status    String   @default("public")
  createdAt DateTime @default(now())
}

model Event {
  id           String              @id @default(cuid())
  title        String
  description  String?
  city         String
  venue        String?
  address      String?
  lat          Float
  lng          Float
  startAt      DateTime
  endAt        DateTime?
  priceBand    String?
  tags         String              // JSON string of string[]
  images       String              // JSON string of string[]
  source       String?
  url          String?
  status       String              @default("public")
  userVisits   UserEventVisit[]
  searchVector Unsupported("tsvector")?
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt

  @@index([startAt])
  @@index([city])
  @@index([title])
}

model User {
  id        String    @id @default(cuid())
  email     String    @unique
  name      String?
  password  String
  role      String    @default("user") // "guest", "user", "admin"
  accounts  Account[]
  sessions  Session[]
  spotVisits UserSpotVisit[]
  eventVisits UserEventVisit[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserSpotVisit {
  id         String    @id @default(cuid())
  userId     String
  spotId     String
  status     String    // "visited", "want_to_visit", "favorite"
  visitedAt  DateTime? // When they actually visited (optional)
  notes      String?   // Personal notes about the visit
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  spot Spot @relation(fields: [spotId], references: [id], onDelete: Cascade)

  @@unique([userId, spotId])
  @@index([userId])
  @@index([spotId])
  @@index([status])
}

model UserEventVisit {
  id         String    @id @default(cuid())
  userId     String
  eventId    String
  status     String    // "attended", "want_to_attend", "interested"
  attendedAt DateTime? // When they actually attended (optional)
  notes      String?   // Personal notes about the event
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@unique([userId, eventId])
  @@index([userId])
  @@index([eventId])
  @@index([status])
}
